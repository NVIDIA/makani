base_config: &BASE_CONFIG

    # metadata file for the dataset
    metadata_json_path: "/metadata/data.json"

    # data
    train_data_path: "/train"
    valid_data_path: "/test"
    exp_dir: "/runs"
    n_years: 1
    img_shape_x: 721
    img_shape_y: 1440

    # files used for normalization of the data
    min_path: "/stats/mins.npy"
    max_path: "/stats/maxs.npy"
    time_means_path:   "/stats/time_means.npy"
    global_means_path: "/stats/global_means.npy"
    global_stds_path:  "/stats/global_stds.npy"
    time_diff_means_path: "/stats/time_diff_means.npy"
    time_diff_stds_path: "/stats/time_diff_stds.npy"

    # architecture related
    nettype: "SNO"
    model_grid_type: "equiangular"
    sht_grid_type: "legendre-gauss"
    scale_factor: 3
    embed_dim: 384
    num_layers: 8
    encoder_kernel_shape: [5,4]
    encoder_mlp: !!bool False
    kernel_shape: [5,4]
    num_groups: 1
    normalization_layer: "instance_norm"
    hard_thresholding_fraction: 1.0
    use_mlp: !!bool True
    mlp_mode: "serial"
    mlp_ratio: 2
    separable: !!bool False
    operator_type: "dhconv"
    activation_function: "gelu"
    pos_embed: "none" # "none", "direct" or "frequency". For resoltuion invariance, use add_grid instead or use "frequency"
    big_skip: !!bool True
    bias: !!bool False

    # training parameters
    losses:
    -   type: "squared geometric l2"
        channel_weights: "auto"
        temp_diff_normalization: !!bool True

    lr: 1E-3
    max_epochs: 100
    batch_size: 64
    weight_decay: 0.0

    # deliberately short epochs for debugging purposes
    n_train_samples_per_epoch: 128
    n_eval_samples: 32

    # scheduler parameters
    scheduler: "ReduceLROnPlateau" # "ReduceLROnPlateau" or "CosineAnnealingLR"
    scheduler_T_max: 100
    scheduler_factor: 0.5
    scheduler_patience: 10
    scheduler_step_size: 20
    scheduler_gamma: 0.5
    lr_warmup_steps: 0

    # general
    verbose: !!bool False

    # wireup stuff
    wireup_info: "mpi"
    wireup_store: "tcp"

    num_data_workers: 2
    num_visualization_workers: 2
    dt: 6 # how many timesteps ahead the model will predict
    n_history: 0 # how many previous timesteps to consider
    prediction_type: "iterative"
    valid_autoreg_steps: 19 # number of autoregressive steps for validation, 20 steps in total

    ics_type: "specify_number"
    save_raw_forecasts: !!bool True
    save_channel: !!bool False
    masked_acc: !!bool False
    maskpath: None
    perturb: !!bool False
    add_noise: !!bool False
    noise_std: 0.

    target: "default" # options default, residual
    normalize_residual: false

    # define channels to be read from data
    channel_names: ["u10m", "v10m", "u100m", "v100m", "t2m", "sp", "msl", "tcwv", "u50", "u100", "u150", "u200", "u250", "u300", "u400", "u500", "u600", "u700", "u850", "u925", "u1000", "v50", "v100", "v150", "v200", "v250", "v300", "v400", "v500", "v600", "v700", "v850", "v925", "v1000", "z50", "z100", "z150", "z200", "z250", "z300", "z400", "z500", "z600", "z700", "z850", "z925", "z1000", "t50", "t100", "t150", "t200", "t250", "t300", "t400", "t500", "t600", "t700", "t850", "t925", "t1000", "q50", "q100", "q150", "q200", "q250", "q300", "q400", "q500", "q600", "q700", "q850", "q925", "q1000"]
    # normalization mode zscore but for q
    normalization: {"tcwv": "minmax","q50": "minmax", "q100": "minmax", "q150": "minmax", "q200": "minmax", "q250": "minmax", "q300": "minmax", "q400": "minmax", "q500": "minmax", "q600": "minmax", "q700": "minmax", "q850": "minmax", "q925": "minmax", "q1000": "minmax"}

    # extra channels
    add_grid: !!bool False
    gridtype: "sinusoidal"
    grid_num_frequencies: 16
    add_zenith: !!bool True
    # invariants
    add_orography: !!bool True
    orography_path: /invariants/orography.nc
    add_landmask: !!bool True
    landmask_path: /invariants/land_sea_mask.nc

    pretrained: !!bool False

    # logging options
    log_to_screen: !!bool True
    log_to_wandb: !!bool True
    log_video: 0 # if > 0 will log every i-th epoch
    save_checkpoint: "legacy"

    optimizer_type: "Adam"
    optimizer_beta1: 0.9
    optimizer_beta2: 0.95
    optimizer_max_grad_norm: 32
    crop_size_x: None
    crop_size_y: None

    # required for validation and scoring
    inf_data_path: "/out_of_sample"

    # Weights and biases configuration
    wandb_name: None # If None, wandb will assign a random name, recommended
    wandb_group: "sno"
    wandb_project: "Debug"
    wandb_entity: "yourwandb"

###########################################################################################################################
# Deterministic models
###########################################################################################################################

# 1 GPUS, h=1, no cuda graphs
base_73ch: &BASELINE_73CH
    <<: *BASE_CONFIG

debug_sfno_sc3_layers8_edim384:
    <<: *BASELINE_73CH
    wandb_group: "debug_sfno_sc3_layers8_edim384"

    nettype: "SFNO"

# single GPU
debug_sno_sc3_layers8_edim384:
    <<: *BASELINE_73CH
    wandb_group: "debug_sno_sc3_layers8_edim384"




###########################################################################################################################
# Probabilistic models
###########################################################################################################################

# 1 GPUS, h=1, no cuda graphs
ensemble_73ch: &ENSEMBLE_73CH
    <<: *BASE_CONFIG

    ensemble_size: 2

    input_noise:
        type: "diffusion"
        mode: "concatenate"
        n_channels: 8

    losses:
    -   type: "ensemble_crps"
        channel_weights: "auto"
        relative_weight: 1.0
        temp_diff_normalization: !!bool True

    lr: 1E-3

# single GPU
debug_ens_sno_sc3_layers8_edim384:
    <<: *ENSEMBLE_73CH
    wandb_group: "debug_ens_sno_sc3_layers8_edim384"